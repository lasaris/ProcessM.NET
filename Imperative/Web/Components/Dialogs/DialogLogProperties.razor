@using LogImport.Models;

<MudDialog>
    <DialogContent>
        <MudForm @bind-IsValid="@_form.IsValid">
            <MudSelect T="string" Label="CaseId" AnchorOrigin="Origin.BottomCenter" Required="true"
                @bind-Value=@_form.caseId>
                @foreach (var header in Log.Headers)
                {
                    <MudSelectItem Value="@(header)" />
                }
            </MudSelect>
            <MudSelect T="string" Label="Activity" AnchorOrigin="Origin.BottomCenter" Required="true"
                @bind-Value=@_form.activity>
                @foreach (var header in Log.Headers)
                {
                    <MudSelectItem Value="@(header)" />
                }
            </MudSelect>

            <MudSwitch Label="Timestamp" Color="Color.Primary" @bind-Checked="_form.hasTimestamp" />
            @if (_form.hasTimestamp)
            {
                <MudSelect T="string" Label="Timestamp" Required="_form.hasTimestamp" AnchorOrigin="Origin.BottomCenter"
                    @bind-Value=@_form.timestamp>
                    @foreach (var header in Log.Headers)
                    {
                        <MudSelectItem Value="@(header)" />
                    }
                </MudSelect>
                <MudTextField HelperText="C# DateTime string format" T="string" Placeholder="d/M/yyyy h:mm:ss tt"
                    Required="_form.hasTimestamp" Immediate="true" Validation="(string f) => TimestampFormatChanged(f)"
                    @bind-Value="@_form.timestampFormat" />
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_form.IsValid)" Class="ml-auto"
            OnClick="SetColumns">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ImportedEventLog Log { get; set; }
    Form _form;

    public struct Form
    {
        public bool IsValid = false;
        public string activity = string.Empty;
        public string caseId = string.Empty;
        public string timestamp = string.Empty;
        public string timestampFormat = string.Empty;
        public bool hasTimestamp = false;

        public Form()
        {

        }
    }

    private void SetColumns()
    {
        Log.Activity = Array.IndexOf(Log.Headers, _form.activity);
        Log.CaseId = Array.IndexOf(Log.Headers, _form.caseId);
        if (_form.hasTimestamp)
        {
            Log.Timestamp = Array.IndexOf(Log.Headers, _form.timestamp);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }


    private string TimestampFormatChanged(string format)
    {
        if (!_form.hasTimestamp || string.IsNullOrEmpty(format))
        {
            return null;
        }

        if (string.IsNullOrEmpty(_form.timestamp))
        {
            return "select timestamp column first";
        }
        try
        {
            if (!Log.TrySetTimestampFormat(_form.timestamp, format, out var failedTimestamp))
            {
                return failedTimestamp + " is not parsable with given format";
            }
        }
        catch (FormatException)
        {
            return "not a valid C# DateTime format";
        }

        _form.timestampFormat = format;
        return null;
    }

}